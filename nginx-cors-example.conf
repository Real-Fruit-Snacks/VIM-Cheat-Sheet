# Nginx configuration for serving VIM with CORS support for private GitLab Pages
# This configuration acts as a reverse proxy to handle CORS issues

# Upstream GitLab Pages
upstream gitlab_pages {
    server your-username.gitlab.io:443;
}

server {
    listen 80;
    server_name your-vim-domain.com;
    
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name your-vim-domain.com;
    
    # SSL Configuration (update with your certificates)
    ssl_certificate /path/to/ssl/cert.pem;
    ssl_certificate_key /path/to/ssl/key.pem;
    
    # Security headers
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # COOP/COEP headers for SharedArrayBuffer support
    add_header Cross-Origin-Embedder-Policy "require-corp" always;
    add_header Cross-Origin-Opener-Policy "same-origin" always;
    
    # Main VIM application
    location / {
        root /var/www/vim-editor/dist;
        try_files $uri $uri/ /index.html;
        
        # CORS headers for main app
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Credentials "true" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, X-Gitlab-Token" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            return 204;
        }
    }
    
    # Proxy requests to GitLab Pages API
    location /gitlab-api/ {
        proxy_pass https://gitlab.com/api/v4/;
        proxy_ssl_server_name on;
        
        # Forward headers
        proxy_set_header Host gitlab.com;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Forward GitLab authentication
        proxy_set_header Authorization $http_authorization;
        proxy_set_header X-Gitlab-Token $http_x_gitlab_token;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Credentials "true" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With, X-Gitlab-Token" always;
    }
    
    # Proxy to private GitLab Pages
    location /gitlab-pages/ {
        # Remove /gitlab-pages prefix
        rewrite ^/gitlab-pages/(.*) /$1 break;
        
        proxy_pass https://gitlab_pages;
        proxy_ssl_server_name on;
        
        # Forward headers
        proxy_set_header Host your-username.gitlab.io;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        
        # Forward authentication
        proxy_set_header Authorization $http_authorization;
        proxy_set_header Cookie $http_cookie;
        
        # CORS headers
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Credentials "true" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
        
        # Handle cookies from GitLab
        proxy_cookie_domain gitlab.io $server_name;
        proxy_cookie_path / /gitlab-pages/;
    }
    
    # Static assets with proper MIME types
    location ~ \.(wasm)$ {
        root /var/www/vim-editor/dist;
        add_header Content-Type application/wasm;
        add_header Cross-Origin-Resource-Policy "cross-origin" always;
        add_header Access-Control-Allow-Origin "*" always;
    }
    
    location ~ \.(js)$ {
        root /var/www/vim-editor/dist;
        add_header Content-Type application/javascript;
        add_header Cross-Origin-Resource-Policy "cross-origin" always;
        add_header Access-Control-Allow-Origin "*" always;
    }
    
    location ~ \.(css)$ {
        root /var/www/vim-editor/dist;
        add_header Content-Type text/css;
        add_header Cross-Origin-Resource-Policy "cross-origin" always;
        add_header Access-Control-Allow-Origin "*" always;
    }
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_types text/plain text/css text/javascript application/javascript application/json application/wasm;
    gzip_min_length 1024;
}

# Alternative: Simple CORS proxy for development
server {
    listen 8080;
    server_name localhost;
    
    location /cors-proxy/ {
        # Remove /cors-proxy prefix and decode the URL
        if ($request_uri ~* "/cors-proxy/(.*)") {
            set $target_url $1;
        }
        
        # Proxy to the decoded URL
        proxy_pass https://$target_url;
        proxy_ssl_server_name on;
        
        # Remove origin restrictions
        proxy_hide_header Access-Control-Allow-Origin;
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
        
        # Handle preflight
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Max-Age 86400;
            add_header Content-Length 0;
            return 204;
        }
    }
}